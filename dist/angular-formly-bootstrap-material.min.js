angular.module("angularFormlyBootstrapMaterial",["formly","angularBootstrapMaterial"]),angular.module("angularFormlyBootstrapMaterial").config(["formlyConfigProvider",function(o){o.setWrapper({name:"formGroup",templateUrl:"form-group.html"})}]),angular.module("angularFormlyBootstrapMaterial").config(["formlyConfigProvider",function(o){o.setType({name:"checkbox",templateUrl:"checkbox.html",wrapper:["formGroup"]})}]),angular.module("angularFormlyBootstrapMaterial").config(["formlyConfigProvider",function(o){return o.setType({name:"checkboxGroup",templateUrl:"checkbox-group.html",defaultOptions:{noFormControl:!1,ngModelAttrs:{required:{attribute:"",bound:""}}},controller:["$scope",function(o){function e(e){var t;o.to.required&&(t=angular.isArray(o.model[l.key])&&o.model[l.key].length>0&&e,o.fc.$setValidity("required",t))}function t(){o.model[l.key]=[],angular.forEach(o.multiCheckbox.checked,function(e,t){e&&o.model[l.key].push(r.options[t][r.valueProp||"value"])}),o.fc.$setTouched(),e(!0),o.to.onChange&&o.to.onChange()}var r=o.to,l=o.options;if(o.multiCheckbox={checked:[],change:t},o.$watch("model",function(e){var t,a;Object.keys(e).length&&(t=e[l.key],o.$watch("to.options",function(e){if(e&&Array.isArray(e)&&Array.isArray(t)){a=r.valueProp||"value";for(var l=0;l<e.length;l++)o.multiCheckbox.checked[l]=-1!==t.indexOf(e[l][a])}}))},!0),l.expressionProperties&&l.expressionProperties["templateOptions.required"]&&o.$watch(function(){return o.to.required},function(o){e(o)}),o.to.required)var a=o.$watch("fc",function(o){o&&(e(!0),a())})}]})}]),angular.module("angularFormlyBootstrapMaterial").config(["formlyConfigProvider",function(o){return o.setType({name:"input",templateUrl:"input.html",wrapper:["formGroup"]})}]),angular.module("angularFormlyBootstrapMaterial").config(["formlyConfigProvider",function(o){return o.setType({name:"radio",templateUrl:"radio.html",wrapper:["formGroup"]})}]),angular.module("angularFormlyBootstrapMaterial").config(["formlyConfigProvider",function(o){return o.setType({name:"select",templateUrl:"select.html",wrapper:["formGroup"],defaultOptions:function(o){function e(o,e,t){return e in o?Object.defineProperty(o,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):o[e]=t,o}var t=o.templateOptions.ngOptions||'option[to.valueProp || "value"] as option[to.labelProp ||"name"] group by option[to.groupProp || "group"] for option in to.options';return{ngModelAttrs:e({},t,{value:o.templateOptions.optionsAttr||"ng-options"})}}})}]),angular.module("angularFormlyBootstrapMaterial").run(["$templateCache",function(o){o.put("form-group.html","<abm-form-group ng-class=\"to.size ? 'form-group-'+ to.size : ''\" error-messages=\"to.errorMessages\" error-messages-include=\"{{to.errorMessagesInclude || ''}}\">\n  <formly-transclude></formly-transclude>\n</abm-form-group>\n"),o.put("checkbox.html",'<div class="checkbox" abm-checkbox label="{{to.label}}">\n  <input type="checkbox" ng-model="model[options.key]">\n</div>\n'),o.put("checkbox-group.html",'<div class="checkbox" ng-repeat="(key, option) in to.options" abm-checkbox label="{{option[to.labelProp]}}">\n  <input type="checkbox" id="{{id + \'_\'+ $index}}" ng-model="multiCheckbox.checked[$index]" ng-change="multiCheckbox.change()">\n</div>\n'),o.put("input.html",'<label data-abm-label type="to.label.type">{{to.label.text}}</label>\n<input type="text" class="form-control" ng-model="model[options.key]" abm-form-control>\n'),o.put("radio.html",'<label>{{to.label}}</label>\n<div class="radio-group">\n  <div class="radio" ng-repeat="(key, option) in to.options" abm-radio label="{{option[to.labelProp || \'name\']}}">\n    <input type="radio" id="{{id + \'_\'+ $index}}" ng-value="option[to.valueProp || \'value\']" ng-model="model[options.key]">\n  </div>\n</div>\n'),o.put("select.html",'<label data-abm-label class="col-xs-2 control-label">Select</label>\n<select class="form-control" data-abm-form-control ng-model="model[options.key]"></select>\n')}]);
